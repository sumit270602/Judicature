import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  CreditCard, 
  Clock, 
  CheckCircle, 
  XCircle, 
  DollarSign,
  User,
  Calendar,
  FileText,
  AlertCircle,
  Download,
  Briefcase
} from 'lucide-react';
import { api } from '@/api';
import { toast } from 'sonner';

interface PaymentRequest {
  _id: string;
  requestId: string;
  lawyer: {
    _id: string;
    name: string;
    email: string;
  };
  amount: number;
  totalAmount: number;
  serviceType: string;
  description: string;
  status: 'pending' | 'accepted' | 'paid' | 'completed' | 'cancelled' | 'rejected';
  requestedAt: string;
  expiresAt: string;
  metadata: {
    urgency: 'low' | 'medium' | 'high';
    estimatedDeliveryDays: number;
    caseId?: string;
    autoGenerated?: boolean;
  };
  relatedCase?: {
    _id: string;
    title: string;
    caseNumber: string;
    workProof?: {
      documentId: string;
      originalName: string;
      description?: string;
    };
  };
}

interface Payment {
  _id: string;
  paymentId: string;
  amount: number;
  status: 'pending' | 'completed' | 'failed' | 'refunded';
  paymentMethod: string;
  createdAt: string;
  lawyer: {
    name: string;
  };
  description: string;
}

const PaymentsSection: React.FC = () => {
  const [paymentRequests, setPaymentRequests] = useState<PaymentRequest[]>([]);
  const [payments, setPayments] = useState<Payment[]>([]);
  const [loading, setLoading] = useState(true);
  const [actionLoading, setActionLoading] = useState<string | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      console.log('Fetching payment data...');
      const [requestsResponse, paymentsResponse] = await Promise.all([
        api.get('/payment-requests?populate=case'),
        api.get('/payment-requests/client/payments')
      ]);
      
      console.log('Payment requests response:', requestsResponse.data);
      console.log('Payments response:', paymentsResponse.data);
      
      setPaymentRequests(requestsResponse.data.data.requests || []);
      setPayments(paymentsResponse.data.payments || []);
    } catch (error) {
      console.error('Failed to fetch payment data:', error);
      toast.error('Failed to load payment information');
    } finally {
      setLoading(false);
    }
  };

  const handleRespondToRequest = async (requestId: string, action: 'accept' | 'reject') => {
    try {
      setActionLoading(requestId);
      await api.post(`/payment-requests/${requestId}/respond`, { action });
      
      toast.success(`Payment request ${action}ed successfully`);
      fetchData();
    } catch (error: any) {
      console.error(`Error ${action}ing payment request:`, error);
      toast.error(error.response?.data?.message || `Failed to ${action} request`);
    } finally {
      setActionLoading(null);
    }
  };

  const handleProceedWithPayment = async (requestId: string) => {
    try {
      setActionLoading(requestId);
      const { data } = await api.post(`/payment-requests/${requestId}/pay`);
      
      if (data.success) {
        toast.success('Redirecting to payment...');
        
        // If there's a checkout URL, redirect to Stripe
        if (data.checkoutUrl) {
          window.location.href = data.checkoutUrl;
        } else {
          toast.error('No payment URL received');
          fetchData();
        }
      } else {
        toast.error(data.message || 'Failed to initiate payment');
      }
    } catch (error: any) {
      console.error('Error proceeding with payment:', error);
      toast.error(error.response?.data?.message || 'Failed to initiate payment');
    } finally {
      setActionLoading(null);
    }
  };

  const getRequestStatusBadge = (status: PaymentRequest['status']) => {
    const statusConfig = {
      pending: { color: 'bg-yellow-100 text-yellow-800', icon: Clock, label: 'Pending Response' },
      accepted: { color: 'bg-blue-100 text-blue-800', icon: CreditCard, label: 'Ready to Pay' },
      paid: { color: 'bg-green-100 text-green-800', icon: CheckCircle, label: 'Paid' },
      completed: { color: 'bg-green-100 text-green-800', icon: CheckCircle, label: 'Completed' },
      cancelled: { color: 'bg-gray-100 text-gray-800', icon: XCircle, label: 'Cancelled' },
      rejected: { color: 'bg-red-100 text-red-800', icon: XCircle, label: 'Rejected' }
    };
    
    const config = statusConfig[status];
    const Icon = config.icon;
    
    return (
      <Badge className={`${config.color} flex items-center gap-1`}>
        <Icon className="h-3 w-3" />
        {config.label}
      </Badge>
    );
  };

  const getPaymentStatusBadge = (status: Payment['status']) => {
    const statusConfig = {
      pending: { color: 'bg-yellow-100 text-yellow-800', icon: Clock, label: 'Processing' },
      completed: { color: 'bg-green-100 text-green-800', icon: CheckCircle, label: 'Completed' },
      failed: { color: 'bg-red-100 text-red-800', icon: XCircle, label: 'Failed' },
      refunded: { color: 'bg-blue-100 text-blue-800', icon: AlertCircle, label: 'Refunded' }
    };
    
    const config = statusConfig[status];
    const Icon = config.icon;
    
    return (
      <Badge className={`${config.color} flex items-center gap-1`}>
        <Icon className="h-3 w-3" />
        {config.label}
      </Badge>
    );
  };

  const getUrgencyBadge = (urgency: 'low' | 'medium' | 'high') => {
    const urgencyConfig = {
      low: 'bg-gray-100 text-gray-800',
      medium: 'bg-blue-100 text-blue-800',
      high: 'bg-red-100 text-red-800'
    };
    
    return (
      <Badge className={urgencyConfig[urgency]}>
        {urgency.charAt(0).toUpperCase() + urgency.slice(1)} Priority
      </Badge>
    );
  };

  const PaymentRequestCard = ({ request }: { request: PaymentRequest }) => (
    <Card key={request._id} className="hover:shadow-md transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1">
            <CardTitle className="text-lg">â‚¹{request.totalAmount.toLocaleString()}</CardTitle>
            <CardDescription className="text-sm text-muted-foreground">
              Request #{request.requestId}
            </CardDescription>
          </div>
          <div className="flex items-center gap-2">
            {getRequestStatusBadge(request.status)}
            {getUrgencyBadge(request.metadata.urgency)}
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <h4 className="font-medium">{request.serviceType.replace('_', ' ').toUpperCase()}</h4>
          <p className="text-sm text-gray-600">{request.description}</p>
          
          {/* Show case information and work proof if available */}
          {request.metadata.caseId && (
            <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
              <div className="flex items-center gap-2 mb-2">
                <Briefcase className="h-4 w-4 text-blue-600" />
                <span className="text-sm font-medium text-blue-900">Related Case</span>
              </div>
              {request.relatedCase && (
                <div className="space-y-2">
                  <p className="text-sm text-blue-800">
                    {request.relatedCase.title} ({request.relatedCase.caseNumber})
                  </p>
                  
                  {/* Show work proof document if available */}
                  {request.relatedCase.workProof && (
                    <div className="flex items-center gap-2 bg-white p-2 rounded border">
                      <FileText className="h-4 w-4 text-green-600" />
                      <span className="text-sm font-medium text-green-800">
                        Work Completion Proof:
                      </span>
                      <Button
                        variant="outline"
                        size="sm"
                        className="ml-auto"
                        onClick={async () => {
                          try {
                            // Use the API to download document
                            const response = await api.get(`/documents/download/${request.relatedCase.workProof.documentId}`, {
                              responseType: 'blob'
                            });
                            
                            // Create blob and download
                            const blob = new Blob([response.data]);
                            const url = window.URL.createObjectURL(blob);
                            const link = document.createElement('a');
                            link.href = url;
                            link.download = request.relatedCase.workProof.originalName || 'work-proof-document';
                            document.body.appendChild(link);
                            link.click();
                            link.remove();
                            window.URL.revokeObjectURL(url);
                            
                            toast.success('Document downloaded successfully');
                          } catch (error) {
                            console.error('Download error:', error);
                            toast.error('Failed to download document');
                          }
                        }}
                      >
                        <Download className="h-3 w-3 mr-1" />
                        View Work Proof
                      </Button>
                    </div>
                  )}
                </div>
              )}
            </div>
          )}
        </div>
        
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div className="flex items-center gap-2">
            <User className="h-4 w-4 text-muted-foreground" />
            <span className="text-muted-foreground">From:</span>
            <span className="font-medium">{request.lawyer.name}</span>
          </div>
          
          <div className="flex items-center gap-2">
            <Calendar className="h-4 w-4 text-muted-foreground" />
            <span className="text-muted-foreground">Requested:</span>
            <span className="font-medium">
              {new Date(request.requestedAt).toLocaleDateString()}
            </span>
          </div>
        </div>
        
        {request.status === 'pending' && (
          <div className="flex gap-2 pt-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleRespondToRequest(request.requestId, 'reject')}
              disabled={actionLoading === request.requestId}
              className="flex-1"
            >
              <XCircle className="h-4 w-4 mr-1" />
              Reject
            </Button>
            <Button
              size="sm"
              onClick={() => handleRespondToRequest(request.requestId, 'accept')}
              disabled={actionLoading === request.requestId}
              className="flex-1"
            >
              <CheckCircle className="h-4 w-4 mr-1" />
              Accept
            </Button>
          </div>
        )}
        
        {request.status === 'accepted' && (
          <Button
            size="sm"
            onClick={() => handleProceedWithPayment(request.requestId)}
            disabled={actionLoading === request.requestId}
            className="w-full"
          >
            <CreditCard className="h-4 w-4 mr-1" />
            Pay Now
          </Button>
        )}
        
        <div className="text-xs text-muted-foreground">
          Expires: {new Date(request.expiresAt).toLocaleDateString()}
        </div>
      </CardContent>
    </Card>
  );

  const PaymentCard = ({ payment }: { payment: Payment }) => (
    <Card key={payment._id} className="hover:shadow-md transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1">
            <CardTitle className="text-lg">â‚¹{payment.amount.toLocaleString()}</CardTitle>
            <CardDescription className="text-sm text-muted-foreground">
              Payment #{payment.paymentId}
            </CardDescription>
          </div>
          {getPaymentStatusBadge(payment.status)}
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        <p className="text-sm text-gray-600">{payment.description}</p>
        
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div className="flex items-center gap-2">
            <User className="h-4 w-4 text-muted-foreground" />
            <span className="text-muted-foreground">To:</span>
            <span className="font-medium">{payment.lawyer.name}</span>
          </div>
          
          <div className="flex items-center gap-2">
            <CreditCard className="h-4 w-4 text-muted-foreground" />
            <span className="text-muted-foreground">Method:</span>
            <span className="font-medium">{payment.paymentMethod}</span>
          </div>
        </div>
        
        <div className="flex items-center justify-between pt-2">
          <div className="text-xs text-muted-foreground">
            {new Date(payment.createdAt).toLocaleDateString()}
          </div>
          
          <Button variant="outline" size="sm">
            <Download className="h-4 w-4 mr-1" />
            Receipt
          </Button>
        </div>
      </CardContent>
    </Card>
  );

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            Payments & Requests
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-32">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-legal-navy"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <CreditCard className="h-5 w-5" />
          Payments & Requests
        </CardTitle>
        <CardDescription>
          Manage payment requests and view transaction history
        </CardDescription>
      </CardHeader>
      
      <CardContent>
        <Tabs defaultValue="requests" className="space-y-4">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="requests">
              Payment Requests ({paymentRequests.length})
            </TabsTrigger>
            <TabsTrigger value="history">
              Payment History ({payments.length})
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="requests" className="space-y-4">
            {paymentRequests.length === 0 ? (
              <div className="text-center py-8">
                <CreditCard className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium">No payment requests</h3>
                <p className="text-muted-foreground">
                  Payment requests from lawyers will appear here
                </p>
              </div>
            ) : (
              <div className="grid gap-4">
                {paymentRequests.map((request) => (
                  <PaymentRequestCard key={request._id} request={request} />
                ))}
              </div>
            )}
          </TabsContent>
          
          <TabsContent value="history" className="space-y-4">
            {payments.length === 0 ? (
              <div className="text-center py-8">
                <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium">No payment history</h3>
                <p className="text-muted-foreground">
                  Your completed payments will appear here
                </p>
              </div>
            ) : (
              <div className="grid gap-4">
                {payments.map((payment) => (
                  <PaymentCard key={payment._id} payment={payment} />
                ))}
              </div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};

export default PaymentsSection;